import fs from "node:fs";
import { join } from "node:path";

const utf8: BufferEncoding = "utf8";
const paths = {
  packages: join(__dirname, "packages"),
  readme: join(__dirname, "README.md"),
};

function getDirectories(source: string): string[] {
  return fs
    .readdirSync(source, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);
}

function getDescription(packageJsonPath: string): string {
  if (!fs.existsSync(packageJsonPath)) {
    return "";
  }

  const { description } = JSON.parse(fs.readFileSync(packageJsonPath, utf8));
  return description ? `: ${description}` : "";
}

function updateReadme() {
  const libs = getDirectories(paths.packages).map((lib) => {
    const description = getDescription(join(paths.packages, lib, "package.json"));
    return `- [${lib}](./packages/${lib}/README.md)${description}`;
  });

  const updatedContent = fs
    .readFileSync(paths.readme, utf8)
    .replace(
      /## Libraries[\s\S]*?(## .+)/,
      `## Libraries\n\n` +
        `<!-- START: Auto-generated by ./populateLibraries.ts -->\n\n` +
        `${libs.join("\n")}\n\n` +
        `<!-- END: Auto-generated by ./populateLibraries.ts -->\n\n$1`,
    );

  fs.writeFileSync(paths.readme, updatedContent, utf8);
}

updateReadme();
